const JSOutputPath = "./src/Classes/API.js"
const JSONOutputPath = "./src/Data/API.json"

const SpecificationResponse = await fetch(
    "https://github.com/discord/discord-api-spec/raw/main/specs/openapi.json"
)

const Specification = await SpecificationResponse.json()
Bun.write(JSONOutputPath, JSON.stringify(Specification, null, 4))

function MethodHasBody(Method) {
    return !(["get", "delete"].includes(Method))
}

function PathsToFunction(Paths) {
    let Output = ""
    for (const Path in Paths) {
        Output += PathToFunction(Path, Paths[Path])
    }
    return Output
}

function PathToFunction(Path, PathData) {
    let Output = ""
    for (const Method in PathData) {
        if (Method === "parameters") { continue }
        Output += MethodToFunction(Path, Method, PathData[Method])
    }
    return Output
}

function MethodToFunction(Path, Method, MethodData) {
    const MethodName = (MethodData.operationId)
    return `
    async ${MethodName}(${MethodHasBody(Method) ? "Body, " : ""}Parameters) {
        return await this.Fetch("${Path}", "${Method}", ${MethodHasBody(Method) ? "Body, " : "{}, "}Parameters)
    }
    `
}

const OutputData = `
// DO NOT EDIT THIS FILE
// It is automatically generated by running "bun run apidata"

import APIFetch from "../Util/APIFetch"

class API {
    constructor(Token) {
        this.Token = Token
    }

    async Fetch(Path, Method, Body, Parameters) {
        return await APIFetch(this.Token, Path, Method, Body, Parameters)
    }
${PathsToFunction(Specification.paths)}
}

export default API
`

await Bun.write(JSOutputPath, OutputData)

// const OutputData = {
//     Host: Specification.servers[0].url,
//     Paths: {}
// }

// function MapParamter(Parameter) {
//     return {
//         Name: Parameter.name,
//         In: Parameter.in,
//         Required: Parameter.required
//     }
// }

// for (const Path in SpecificationPaths) {
//     const PathData = SpecificationPaths[Path]
//     const Data = {
//         Parameters: PathData.parameters?.map(MapParamter),
//         Methods: {}
//     }

//     for (const Method in PathData) {
//         if (Method === "parameters") { continue }
//         const MethodName = Method.toUpperCase()
//         const MethodData = PathData[Method]
//         console.log(Method, MethodData)

//         Data.Methods[MethodName] = {
//             OperationName: pascalcase(MethodData.operationId),
//             RequiresToken: !!MethodData.security.find((S) => !!S.BotToken),
//             Parameters: MethodData.parameters?.map(MapParamter)
//         }
//     }

//     OutputData.Paths[Path] = Data
// }
